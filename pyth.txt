                           ------* PYTHON *--------
1.on the basis of syntax                                 PVM----JIT speed increase of python
easy to learn
2.huge community support
3.Interpreter based
4.Dynamicaly typed
5.plateform independent
6.huge  no of library support
extension--->.py->source
         .pyc-->byte-code

Limitation---->disadvantage
1. run time error due to dynamically behaviour.
2.slow as compair to compiler based language.
3.memory management 
   

   ---- Token---
stack overflow for error find
smalle unite of programs  that perform
specific task/function is called token

1.Keyword
2.Punctuation
3.Identifier
4.Operator
5.Literals


-----in-built function----
max()---->maximum value
min()---->minimum value
len()--->length 
print()--->o/p
input()--->run-time value
type()--->date-type
id()---->memory address


name of  an any object in python are called Identifier
python call by reference
bitwise Operator(&(and),|(or), ~(not), ^(x-or ),<<(left shift) ,>>(right shift))
left shift=no.*2**bit
return value=arithmetic,assignment, bitwise
return boolean=camparision(campaire value) true/false, logical ,identity( campair memory address true/false ),membership

in-built function---->
print()--chech output
input()--->to take number input
id()--->to check address
type()--->to check data type
min()---->
max()----->
len()---->
sum()----->

--------  Operator---------
1.arithmetic--->(+, -, /, *, // ,% ,** )
2.camparision--->(< ,> <=, >= ,== ,!= )
3.assignment---->(=, += ,-= ,*= ,/= ,%= ,//= ,**=)
4. identity
  ( is, is not)
5.membership
  (in ,not in)
6.Bitwise

Bitwise Operator.

 Binary---(0,1)
 octal--->(0,...7)
 Decimal---->(0,...9)
 hexadecimal----->(0,...9 A....F a....f)


 ------Literals------
 type of Literals--->
 |-->numeric 
 |          |---->integer
 |          |----->float
 |          |----->complex
 |---->string
 |---->List 
 |---->tuple
 |---->set
 |---->frozenset
 |---->dict

 string---->
  syntax: collection of character
  represented in  1.-->' ' single-line
                  2.-->" "  string
                  3.-->'''  '''  multi-line string

         ------ 
           list-------


           tuple-------

     note -->numeric(integer, float, complex)
      ( string,list, tuple---> oredered collection)
     (set, frozenset   --->unique element hold, unordered collection)
     (dict----> mapped-data)

            ------ Type casting-------
            int()
            str()
            list()
            dict()
            tuple()
            set()
            frozenset()

     -------   Data types -------
     string-->collection of character
              oredered collection
              indexing support
              slicing support
              immutable in nature
              represented in -->
                     1.' ' single-line string
                     2 " "  single-line string
                     3.''' ''' multi-line string
                     x='sandeep'
                     print(x)
                     print(type(x))
                  in-built function for string
                   1.max()
                   2.min()
                   3.len()
                   4.id()
                   5.ord()
                   6.chr()
       ------- in-build method   ------- 
       1.upper()
       2.lower()
       3.title()
       4.capitalize()   
       5.join()--->syntax-('char'.join(object) single par take)
       6.split()-->(by default space to break( split) and space (or character) replace by comma) syntax--("char',how many time)
       7.index()
       8.count()
       9.find
       10. swapcase  

      -----list ----- 
    =>  collection of  an element ,ordered collection,homogenous,and herogenous
    => indexing support
    => slicing support
    => mutable nature
    => represented in [] with comma sepersted element

 ---- function for list 
                   1.max()(same type of data homogenous  )
                   2.min()(same type of data homogenous  )
                   3.len()( both homo and hetro)
                   4.id()( both)
                   5.sum()(only integer  )
                   6.type( )
                   7.list()

      ------methid of List-----
              1.append( add one element in last position )
              2.extend(add multiple element in last position)
              3.insert(add element in targeted position)
              4.pop(remove/delete last element)
              5.remove(remove target  any element/object)
              6.clear(clear/remove all element)
              7.copy(to creat addition copy with diff address)
              8.index()
              9.count()
              10.reverse( reverse list)
              11.sort( to arrenge acending order)
                   
